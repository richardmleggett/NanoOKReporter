/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nanookreporter;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JFileChooser;
import javax.swing.JTable;

/**
 *
 * @author leggettr
 */
public class NanoOKReporter extends javax.swing.JFrame {
    private NanoOKSample sample;
    private AROMap aroMap;
    private int pf;
    private int type;
    private int cardChunkSliderMax = 0;
    private int ntChunkSliderMax = 0;
    private int bacteriaChunkSliderMax = 0;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("d/M/yyyy HH:mm:ss");
    private int[] cardColumnWidths = {0, 0, 0, 0, 0};
    private int[] ntColumnWidths = {0, 0, 0, 0};
    private int bacteriaColumnWidths[] = {0, 0, 0, 0};
    
    /**
     * Creates new form ReporterFrame
     */
    public NanoOKReporter() {
        super("NanoOKReporter");
        System.out.println("NanoOKReporter");
        System.out.println("");
        System.out.println("To do:");
        System.out.println("- Allow selection of BLAST criteria");     
        System.out.println("- For rescan, store last modified time and check this before recaching");
        System.out.println("");
        initComponents();
        setNtColumnWidths();
        setCardColumnWidths();
        setBacteriaColumnWidths();
        AROMap.readMapFile("/Users/leggettr/Documents/Databases/CARD_1.1.1_Download_17Oct16/aro.csv");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jTextField5 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        PassFailButtonGroup = new javax.swing.ButtonGroup();
        Template2DButtonGroup = new javax.swing.ButtonGroup();
        mainTabbedPane = new javax.swing.JTabbedPane();
        StatsPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        timeRunningLabel = new javax.swing.JLabel();
        readsAnalysedLabel = new javax.swing.JLabel();
        chunksLabel = new javax.swing.JLabel();
        ntPanel = new javax.swing.JPanel();
        ntScrollPane = new javax.swing.JScrollPane();
        taxonTable = new javax.swing.JTable();
        ntChunkSlider = new javax.swing.JSlider();
        ntChunkLabel = new javax.swing.JLabel();
        ntChunkTimeLabel = new javax.swing.JLabel();
        bacteriaPanel = new javax.swing.JPanel();
        bacteriaScrollPane = new javax.swing.JScrollPane();
        bacteriaTable = new javax.swing.JTable();
        bacteriaChunkSlider = new javax.swing.JSlider();
        bacteriaChunkLabel = new javax.swing.JLabel();
        bacteriaChunkTimeLabel = new javax.swing.JLabel();
        cardPanel = new javax.swing.JPanel();
        cardScrollPane = new javax.swing.JScrollPane();
        cardTable = new javax.swing.JTable();
        cardChunkSlider = new javax.swing.JSlider();
        cardChunkLabel = new javax.swing.JLabel();
        cardChunkTimeLabel = new javax.swing.JLabel();
        progressLabel = new javax.swing.JLabel();
        samplePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        sampleTextField = new javax.swing.JTextField();
        ChooseButton = new javax.swing.JButton();
        selectPanel = new javax.swing.JPanel();
        radioPanel = new javax.swing.JPanel();
        failRadioButton = new javax.swing.JRadioButton();
        passRadioButton = new javax.swing.JRadioButton();
        twoDRadioButton = new javax.swing.JRadioButton();
        templateRadioButton = new javax.swing.JRadioButton();
        loadNtButton = new javax.swing.JButton();
        loadBacteriaButton = new javax.swing.JButton();
        loadCardButton = new javax.swing.JButton();

        jTextField5.setText("jTextField5");

        jLabel5.setText("Chunk:");

        jTextField6.setEditable(false);
        jTextField6.setText("jTextField5");

        jTextField7.setEditable(false);
        jTextField7.setText("jTextField7");

        jLabel7.setText("of");

        jLabel9.setText("jLabel9");

        jLabel8.setText("jLabel8");

        jTextField2.setEditable(false);
        jTextField2.setText("jTextField2");

        jTextField3.setEditable(false);
        jTextField3.setText("jTextField3");

        jTextField4.setEditable(false);
        jTextField4.setText("jTextField4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Time running:");

        jLabel3.setText("Reads analysed:");

        jLabel4.setText("Chunks:");

        javax.swing.GroupLayout StatsPanelLayout = new javax.swing.GroupLayout(StatsPanel);
        StatsPanel.setLayout(StatsPanelLayout);
        StatsPanelLayout.setHorizontalGroup(
            StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatsPanelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chunksLabel)
                    .addComponent(readsAnalysedLabel)
                    .addComponent(timeRunningLabel))
                .addContainerGap(834, Short.MAX_VALUE))
        );
        StatsPanelLayout.setVerticalGroup(
            StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(timeRunningLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(readsAnalysedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(chunksLabel))
                .addContainerGap(417, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Stats", StatsPanel);

        ntPanel.setEnabled(false);

        ntScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        taxonTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Rank", "Count", "Id", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        taxonTable.setMaximumSize(null);
        taxonTable.setShowGrid(false);
        ntScrollPane.setViewportView(taxonTable);

        ntChunkSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ntChunkSliderStateChanged(evt);
            }
        });

        ntChunkLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ntChunkLabel.setText("Chunk: 5000/5000");

        ntChunkTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ntChunkTimeLabel.setText("22/12/2017 13:34:05");

        javax.swing.GroupLayout ntPanelLayout = new javax.swing.GroupLayout(ntPanel);
        ntPanel.setLayout(ntPanelLayout);
        ntPanelLayout.setHorizontalGroup(
            ntPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ntScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
            .addGroup(ntPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ntChunkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ntChunkSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ntChunkTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        ntPanelLayout.setVerticalGroup(
            ntPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ntPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ntPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ntChunkSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ntChunkTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ntChunkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ntScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
        );

        mainTabbedPane.addTab("NT", ntPanel);

        bacteriaScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        bacteriaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Rank", "Count", "Id", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        bacteriaTable.setMaximumSize(null);
        bacteriaTable.setShowGrid(false);
        bacteriaScrollPane.setViewportView(bacteriaTable);

        bacteriaChunkSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bacteriaChunkSliderStateChanged(evt);
            }
        });

        bacteriaChunkLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bacteriaChunkLabel.setText("Chunk: 5000/5000");

        bacteriaChunkTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        bacteriaChunkTimeLabel.setText("22/12/2017 13:34:05");

        javax.swing.GroupLayout bacteriaPanelLayout = new javax.swing.GroupLayout(bacteriaPanel);
        bacteriaPanel.setLayout(bacteriaPanelLayout);
        bacteriaPanelLayout.setHorizontalGroup(
            bacteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bacteriaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
            .addGroup(bacteriaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bacteriaChunkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bacteriaChunkSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bacteriaChunkTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        bacteriaPanelLayout.setVerticalGroup(
            bacteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bacteriaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bacteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bacteriaChunkSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bacteriaChunkTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bacteriaChunkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bacteriaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110))
        );

        mainTabbedPane.addTab("Bacteria", bacteriaPanel);

        cardScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        cardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Count", "ID", "ARO", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        cardScrollPane.setViewportView(cardTable);
        if (cardTable.getColumnModel().getColumnCount() > 0) {
            cardTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            cardTable.getColumnModel().getColumn(1).setPreferredWidth(10);
            cardTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        cardChunkSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cardChunkSliderStateChanged(evt);
            }
        });

        cardChunkLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cardChunkLabel.setText("Chunk: 5000/5000");

        cardChunkTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cardChunkTimeLabel.setText("22/12/2017 13:34:05");

        javax.swing.GroupLayout cardPanelLayout = new javax.swing.GroupLayout(cardPanel);
        cardPanel.setLayout(cardPanelLayout);
        cardPanelLayout.setHorizontalGroup(
            cardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cardScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
            .addGroup(cardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cardChunkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardChunkSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardChunkTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        cardPanelLayout.setVerticalGroup(
            cardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cardChunkTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cardChunkLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cardChunkSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
        );

        mainTabbedPane.addTab("CARD", cardPanel);

        progressLabel.setText("Ready");

        samplePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sample"));
        samplePanel.setName(""); // NOI18N

        jLabel1.setText("Sample directory:");

        sampleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleTextFieldActionPerformed(evt);
            }
        });

        ChooseButton.setText("Choose...");
        ChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout samplePanelLayout = new javax.swing.GroupLayout(samplePanel);
        samplePanel.setLayout(samplePanelLayout);
        samplePanelLayout.setHorizontalGroup(
            samplePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(samplePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sampleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ChooseButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        samplePanelLayout.setVerticalGroup(
            samplePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(samplePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(samplePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sampleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ChooseButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select"));

        PassFailButtonGroup.add(failRadioButton);
        failRadioButton.setText("Fail");
        failRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                failRadioButtonActionPerformed(evt);
            }
        });

        PassFailButtonGroup.add(passRadioButton);
        passRadioButton.setSelected(true);
        passRadioButton.setText("Pass");
        passRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passRadioButtonActionPerformed(evt);
            }
        });

        Template2DButtonGroup.add(twoDRadioButton);
        twoDRadioButton.setSelected(true);
        twoDRadioButton.setText("2D");
        twoDRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoDRadioButtonActionPerformed(evt);
            }
        });

        Template2DButtonGroup.add(templateRadioButton);
        templateRadioButton.setText("Template");
        templateRadioButton.setToolTipText("");
        templateRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateRadioButtonActionPerformed(evt);
            }
        });

        loadNtButton.setLabel("Load NT");
        loadNtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadNtButtonActionPerformed(evt);
            }
        });

        loadBacteriaButton.setLabel("Load Bacteria");
        loadBacteriaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBacteriaButtonActionPerformed(evt);
            }
        });

        loadCardButton.setLabel("Load CARD");
        loadCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout radioPanelLayout = new javax.swing.GroupLayout(radioPanel);
        radioPanel.setLayout(radioPanelLayout);
        radioPanelLayout.setHorizontalGroup(
            radioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, radioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(twoDRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(templateRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(passRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(failRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(loadNtButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadBacteriaButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadCardButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        radioPanelLayout.setVerticalGroup(
            radioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, radioPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(radioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(templateRadioButton)
                    .addComponent(twoDRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passRadioButton)
                    .addComponent(failRadioButton)
                    .addComponent(loadNtButton)
                    .addComponent(loadBacteriaButton)
                    .addComponent(loadCardButton))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout selectPanelLayout = new javax.swing.GroupLayout(selectPanel);
        selectPanel.setLayout(selectPanelLayout);
        selectPanelLayout.setHorizontalGroup(
            selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        selectPanelLayout.setVerticalGroup(
            selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(selectPanelLayout.createSequentialGroup()
                .addComponent(radioPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(samplePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(samplePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(selectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainTabbedPane.getAccessibleContext().setAccessibleName("Stats");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseButtonActionPerformed
        int result;

        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Pick sample directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory());
            sampleTextField.setText(chooser.getSelectedFile().toString());
            sample = new NanoOKSample(chooser.getSelectedFile().toString());
            //ChunkLoader loader = new ChunkLoader(this, sample);
            //loader.execute();
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_ChooseButtonActionPerformed

    private void passRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passRadioButtonActionPerformed
        if (sample != null) {
            setSliders();
            updateTableCard();
            updateTableNt();
            updateTableBacteria();
        }
    }//GEN-LAST:event_passRadioButtonActionPerformed

    private void failRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_failRadioButtonActionPerformed
        if (sample != null) {
            setSliders();
            updateTableCard();
            updateTableNt();
            updateTableBacteria();
        }
    }//GEN-LAST:event_failRadioButtonActionPerformed

    private void templateRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_templateRadioButtonActionPerformed
        if (sample != null) {
            setSliders();
            updateTableCard();
            updateTableNt();
            updateTableBacteria();
        }
    }//GEN-LAST:event_templateRadioButtonActionPerformed

    private void sampleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sampleTextFieldActionPerformed

    private void twoDRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoDRadioButtonActionPerformed
        if (sample != null) {
            setSliders();
            updateTableCard();
            updateTableNt();
            updateTableBacteria();
        }
    }//GEN-LAST:event_twoDRadioButtonActionPerformed

    private void cardChunkSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cardChunkSliderStateChanged
        if (sample != null) {
            BlastChunkSet chunkSet = sample.getCardFile().getChunkSet(type, pf);
            cardChunkLabel.setText("Chunk "+ cardChunkSlider.getValue() + "/" + chunkSet.getNumberOfChunks());
            cardChunkTimeLabel.setText(dateFormat.format(chunkSet.getChunkLastModified(cardChunkSlider.getValue())));
            if (cardChunkSlider.getValueIsAdjusting() == false) {
                chunkSet.setSelectedChunk(cardChunkSlider.getValue());
                updateTableCard();
            }
        }
    }//GEN-LAST:event_cardChunkSliderStateChanged

    private void ntChunkSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ntChunkSliderStateChanged
        if (sample != null) {
            BlastChunkSet chunkSet = sample.getNtFile().getChunkSet(type, pf);
            ntChunkLabel.setText("Chunk "+ ntChunkSlider.getValue() + "/" + chunkSet.getNumberOfChunks());
            ntChunkTimeLabel.setText(dateFormat.format(chunkSet.getChunkLastModified(ntChunkSlider.getValue())));
            if (ntChunkSlider.getValueIsAdjusting() == false) {
                chunkSet.setSelectedChunk(ntChunkSlider.getValue());
                updateTableNt();
            }
        }
    }//GEN-LAST:event_ntChunkSliderStateChanged

    private void bacteriaChunkSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bacteriaChunkSliderStateChanged
        if (sample != null) {
            BlastChunkSet chunkSet = sample.getBacteriaFile().getChunkSet(type, pf);
            bacteriaChunkLabel.setText("Chunk "+ bacteriaChunkSlider.getValue() + "/" + chunkSet.getNumberOfChunks());
            bacteriaChunkTimeLabel.setText(dateFormat.format(chunkSet.getChunkLastModified(bacteriaChunkSlider.getValue())));
            if (bacteriaChunkSlider.getValueIsAdjusting() == false) {
                chunkSet.setSelectedChunk(bacteriaChunkSlider.getValue());
                updateTableBacteria();
            }
        }
    }//GEN-LAST:event_bacteriaChunkSliderStateChanged

    private void loadNtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadNtButtonActionPerformed
        ChunkLoader loader = new ChunkLoader(this,
                                             sample,
                                             BlastFile.DATABASE_NT,
                                             twoDRadioButton.isSelected() ? BlastFile.TYPE_2D:BlastFile.TYPE_TEMPLATE,
                                             passRadioButton.isSelected() ? BlastFile.TYPE_PASS:BlastFile.TYPE_FAIL);
        loader.execute();
    }//GEN-LAST:event_loadNtButtonActionPerformed

    private void loadBacteriaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBacteriaButtonActionPerformed
        ChunkLoader loader = new ChunkLoader(this,
                                             sample,
                                             BlastFile.DATABASE_BACTERIA,
                                             twoDRadioButton.isSelected() ? BlastFile.TYPE_2D:BlastFile.TYPE_TEMPLATE,
                                             passRadioButton.isSelected() ? BlastFile.TYPE_PASS:BlastFile.TYPE_FAIL);
        loader.execute();
    }//GEN-LAST:event_loadBacteriaButtonActionPerformed

    private void loadCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCardButtonActionPerformed
        ChunkLoader loader = new ChunkLoader(this,
                                             sample,
                                             BlastFile.DATABASE_CARD,
                                             twoDRadioButton.isSelected() ? BlastFile.TYPE_2D:BlastFile.TYPE_TEMPLATE,
                                             passRadioButton.isSelected() ? BlastFile.TYPE_PASS:BlastFile.TYPE_FAIL);
        loader.execute();
    }//GEN-LAST:event_loadCardButtonActionPerformed
    
    public void findType() {
        if (passRadioButton.isSelected()) {
            pf = BlastFile.TYPE_PASS;
        } else {
            pf = BlastFile.TYPE_FAIL;
        }
        
        if (templateRadioButton.isSelected()) {
            type = BlastFile.TYPE_TEMPLATE;
        } else {
            type = BlastFile.TYPE_2D;
        }
    }
    
    private void setSliders() {
        getType();
        BlastChunkSet amrChunkSet = sample.getCardFile().getChunkSet(type, pf);
        BlastChunkSet taxonChunkSet = sample.getNtFile().getChunkSet(type, pf);
        BlastChunkSet bacteriaChunkSet = sample.getBacteriaFile().getChunkSet(type, pf);
        cardChunkSlider.setValue(amrChunkSet.getNumberOfChunks());
        ntChunkSlider.setValue(taxonChunkSet.getNumberOfChunks());
        bacteriaChunkSlider.setValue(bacteriaChunkSet.getNumberOfChunks());
        amrChunkSet.setSelectedChunk(amrChunkSet.getNumberOfChunks());
        taxonChunkSet.setSelectedChunk(taxonChunkSet.getNumberOfChunks());
        bacteriaChunkSet.setSelectedChunk(bacteriaChunkSet.getNumberOfChunks());
    }
    
    public boolean isLoadCardSelected() {
        return true; //loadCardCheckBox.isSelected();
    }

    public boolean isLoadBacteriaSelected() {
        return true; // loadBacteriaCheckBox.isSelected();
    }

    public boolean isLoadNtSelected() {
        return true; // loadNtCheckBox.isSelected();
    }

    
    public void updateTableCard() {     
        if (isLoadCardSelected()) {
            setStatus("Updating AMR table");
            findType();

            BlastChunkSet amrChunkSet = sample.getCardFile().getChunkSet(type, pf);
            sample.getCardFile().countSet(type, pf);
            sample.getCardFile().updateTable(cardTable, type, pf);
            cardChunkLabel.setText("Chunk "+ amrChunkSet.getSelectedChunk() + "/" + amrChunkSet.getNumberOfChunks());
            if (cardChunkSliderMax != amrChunkSet.getNumberOfChunks()) {
                cardChunkSliderMax = amrChunkSet.getNumberOfChunks();
                cardChunkSlider.setMaximum(amrChunkSet.getNumberOfChunks());
                amrChunkSet.setSelectedChunk(cardChunkSliderMax);
            }
            cardChunkSlider.setValue(amrChunkSet.getSelectedChunk());
            cardTable.setModel(amrChunkSet);
            cardTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            setCardColumnWidths();

            setStatus("Table updated");
        }
    }
    
    public void updateTableNt() {        
        if (isLoadNtSelected()) {
            setStatus("Updating taxonomy table");
            findType();

            BlastChunkSet taxonChunkSet = sample.getNtFile().getChunkSet(type, pf);
            sample.getNtFile().countSet(type, pf);
            sample.getNtFile().updateTable(taxonTable, type, pf);
            ntChunkLabel.setText("Chunk "+ taxonChunkSet.getSelectedChunk() + "/" + taxonChunkSet.getNumberOfChunks());
            if (ntChunkSliderMax != taxonChunkSet.getNumberOfChunks()) {
                ntChunkSliderMax = taxonChunkSet.getNumberOfChunks();
                ntChunkSlider.setMaximum(taxonChunkSet.getNumberOfChunks());
                taxonChunkSet.setSelectedChunk(ntChunkSliderMax);
            }
            ntChunkSlider.setValue(taxonChunkSet.getSelectedChunk());
            taxonTable.setModel(taxonChunkSet);
            taxonTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            setNtColumnWidths();

            setStatus("Table updated");
        }
    }    

    public void updateTableBacteria() {        
        if (isLoadBacteriaSelected()) {
            setStatus("Updating bacteria table");
            findType();

            BlastChunkSet bacteriaChunkSet = sample.getBacteriaFile().getChunkSet(type, pf);
            sample.getBacteriaFile().countSet(type, pf);
            sample.getBacteriaFile().updateTable(bacteriaTable, type, pf);
            bacteriaChunkLabel.setText("Chunk "+ bacteriaChunkSet.getSelectedChunk() + "/" + bacteriaChunkSet.getNumberOfChunks());
            if (bacteriaChunkSliderMax != bacteriaChunkSet.getNumberOfChunks()) {
                bacteriaChunkSliderMax = bacteriaChunkSet.getNumberOfChunks();
                bacteriaChunkSlider.setMaximum(bacteriaChunkSet.getNumberOfChunks());
                bacteriaChunkSet.setSelectedChunk(bacteriaChunkSliderMax);
            }
            bacteriaChunkSlider.setValue(bacteriaChunkSet.getSelectedChunk());
            bacteriaTable.setModel(bacteriaChunkSet);
            bacteriaTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            setBacteriaColumnWidths();

            setStatus("Table updated");
        }
    }    

    public void setCardColumnWidths() {
        cardTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        cardTable.getColumnModel().getColumn(1).setPreferredWidth(100);        
        cardTable.getColumnModel().getColumn(2).setPreferredWidth(150);
        cardTable.getColumnModel().getColumn(3).setPreferredWidth(300);
        cardTable.getColumnModel().getColumn(4).setPreferredWidth(600);
    }
    
    public void setNtColumnWidths() {
        taxonTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        taxonTable.getColumnModel().getColumn(1).setPreferredWidth(100);        
        taxonTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        taxonTable.getColumnModel().getColumn(3).setPreferredWidth(600);
    }

    public void setBacteriaColumnWidths() {
        bacteriaTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        bacteriaTable.getColumnModel().getColumn(1).setPreferredWidth(100);        
        bacteriaTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        bacteriaTable.getColumnModel().getColumn(3).setPreferredWidth(600);
    }
    
    public void setStatus(String s) {
        progressLabel.setText(s);
    }
    
    /**
     * Centres a window on the screen.
     *
     * @param  w the window to centre
     */
    public static void centreWindow(Window w) {
         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
         Rectangle frameSize = w.getBounds();

         w.setLocation((screenSize.width - frameSize.width) / 2,
                       (screenSize.height - frameSize.height) / 2);
    }    
    
    public void handleNewDirectory(String directory) {
    }
    
    public void loadFinished() {
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NanoOKReporter rf = new NanoOKReporter();
                centreWindow(rf);
                rf.setVisible(true);
                System.out.println("Running");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseButton;
    private javax.swing.ButtonGroup PassFailButtonGroup;
    private javax.swing.JPanel StatsPanel;
    private javax.swing.ButtonGroup Template2DButtonGroup;
    private javax.swing.JLabel bacteriaChunkLabel;
    private javax.swing.JSlider bacteriaChunkSlider;
    private javax.swing.JLabel bacteriaChunkTimeLabel;
    private javax.swing.JPanel bacteriaPanel;
    private javax.swing.JScrollPane bacteriaScrollPane;
    private javax.swing.JTable bacteriaTable;
    private javax.swing.JLabel cardChunkLabel;
    private javax.swing.JSlider cardChunkSlider;
    private javax.swing.JLabel cardChunkTimeLabel;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JScrollPane cardScrollPane;
    private javax.swing.JTable cardTable;
    private javax.swing.JLabel chunksLabel;
    private javax.swing.JRadioButton failRadioButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JButton loadBacteriaButton;
    private javax.swing.JButton loadCardButton;
    private javax.swing.JButton loadNtButton;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JLabel ntChunkLabel;
    private javax.swing.JSlider ntChunkSlider;
    private javax.swing.JLabel ntChunkTimeLabel;
    private javax.swing.JPanel ntPanel;
    private javax.swing.JScrollPane ntScrollPane;
    private javax.swing.JRadioButton passRadioButton;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JPanel radioPanel;
    private javax.swing.JLabel readsAnalysedLabel;
    private javax.swing.JPanel samplePanel;
    private javax.swing.JTextField sampleTextField;
    private javax.swing.JPanel selectPanel;
    private javax.swing.JTable taxonTable;
    private javax.swing.JRadioButton templateRadioButton;
    private javax.swing.JLabel timeRunningLabel;
    private javax.swing.JRadioButton twoDRadioButton;
    // End of variables declaration//GEN-END:variables
}
