/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nanookreporter;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.SplashScreen;
import java.awt.Toolkit;
import java.awt.Window;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JFileChooser;
import javax.swing.JTable;

/**
 *
 * @author leggettr
 */
public class NanoOKReporter extends javax.swing.JFrame {
    private NanoOKReporterOptions options;
    private NanoOKSample sample;
    private AROMap aroMap;
    private int pf;
    private int type;
    private int cardChunkSliderMax = 0;
    private int ntChunkSliderMax = 0;
    private int bacteriaChunkSliderMax = 0;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("d/M/yyyy HH:mm:ss");
    private int[] cardColumnWidths = {0, 0, 0, 0, 0};
    private int[] ntColumnWidths = {0, 0, 0, 0};
    private int bacteriaColumnWidths[] = {0, 0, 0, 0};
    
    /**
     * Creates new form ReporterFrame
     */
    public NanoOKReporter() {
        super("NanoOKReporter");
//        final SplashScreen splash = SplashScreen.getSplashScreen();
//        this.setSize(new Dimension(1000,800));
        this.setPreferredSize(new Dimension(1000,800));
        System.out.println("NanoOKReporter");
        System.out.println("");
        System.out.println("To do:");
        System.out.println("- Allow selection of BLAST criteria");     
        System.out.println("- For rescan, store last modified time and check this before recaching");
        System.out.println("");
        initComponents();
        setNtColumnWidths();
        setCardColumnWidths();
        setBacteriaColumnWidths();
        SplashScreen splash = SplashScreen.getSplashScreen();
        Dimension d = splash.getSize();
        Graphics g = splash.createGraphics();
        g.setColor(Color.WHITE);        
        g.drawString("Loading taxonomy...", (int)d.getWidth()/2, 3*(int)d.getHeight()/4);
        splash.update();
        AROMap.readMapFile("/Users/leggettr/Documents/Databases/CARD_1.1.1_Download_17Oct16/aro.csv");
        
        options = new NanoOKReporterOptions();
        taxonomyPanel.setOptions(options);
        summaryPanel.setOptions(options);
        
        if (options.getLastSample() != "") {
            //sampleTextField.setText(options.getLastSample());
            setSampleDirSelected(options.getLastSample());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jTextField5 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        PassFailButtonGroup = new javax.swing.ButtonGroup();
        Template2DButtonGroup = new javax.swing.ButtonGroup();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        mainTabbedPane = new javax.swing.JTabbedPane();
        ntPanel = new javax.swing.JPanel();
        ntScrollPane = new javax.swing.JScrollPane();
        taxonTable = new javax.swing.JTable();
        ntChunkSlider = new javax.swing.JSlider();
        ntChunkLabel = new javax.swing.JLabel();
        ntChunkTimeLabel = new javax.swing.JLabel();
        bacteriaPanel = new javax.swing.JPanel();
        bacteriaScrollPane = new javax.swing.JScrollPane();
        bacteriaTable = new javax.swing.JTable();
        bacteriaChunkSlider = new javax.swing.JSlider();
        bacteriaChunkLabel = new javax.swing.JLabel();
        bacteriaChunkTimeLabel = new javax.swing.JLabel();
        cardPanel = new javax.swing.JPanel();
        cardScrollPane = new javax.swing.JScrollPane();
        cardTable = new javax.swing.JTable();
        cardChunkSlider = new javax.swing.JSlider();
        cardChunkLabel = new javax.swing.JLabel();
        cardChunkTimeLabel = new javax.swing.JLabel();
        summaryPanelTab = new javax.swing.JPanel();
        summaryScrollPane = new javax.swing.JScrollPane();
        summaryPanel = new nanookreporter.SummaryPanel();
        taxonomyPanelTab = new javax.swing.JPanel();
        taxonomyScrollPane = new javax.swing.JScrollPane();
        taxonomyPanel = new nanookreporter.TaxonomyPanel();
        bacteriaChunkSlider1 = new javax.swing.JSlider();
        bacteriaChunkLabel1 = new javax.swing.JLabel();
        bacteriaChunkTimeLabel1 = new javax.swing.JLabel();
        walkoutPanelTab = new javax.swing.JPanel();
        walkoutScrollPane = new javax.swing.JScrollPane();
        walkoutPanel = new nanookreporter.WalkoutPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel3 = new javax.swing.JLabel();
        readTypeCombo = new javax.swing.JComboBox<>();
        passOrFailCombo = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        chunksToLoadCombo = new javax.swing.JComboBox<>();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        loadNtButton = new javax.swing.JButton();
        loadBacteriaButton = new javax.swing.JButton();
        loadCardButton = new javax.swing.JButton();
        WalkButton = new javax.swing.JButton();
        statusPanel = new javax.swing.JPanel();
        progressLabel = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        actionMenu = new javax.swing.JMenu();
        saveCardSummaryItem = new javax.swing.JMenuItem();
        saveChunkTimesItem = new javax.swing.JMenuItem();

        jTextField5.setText("jTextField5");

        jLabel5.setText("Chunk:");

        jTextField6.setEditable(false);
        jTextField6.setText("jTextField5");

        jTextField7.setEditable(false);
        jTextField7.setText("jTextField7");

        jLabel7.setText("of");

        jLabel9.setText("jLabel9");

        jLabel8.setText("jLabel8");

        jTextField2.setEditable(false);
        jTextField2.setText("jTextField2");

        jTextField3.setEditable(false);
        jTextField3.setText("jTextField3");

        jTextField4.setEditable(false);
        jTextField4.setText("jTextField4");

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ntPanel.setEnabled(false);

        ntScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        taxonTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Rank", "Count", "Id", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        taxonTable.setMaximumSize(null);
        taxonTable.setShowGrid(false);
        ntScrollPane.setViewportView(taxonTable);

        ntChunkSlider.setMaximum(0);
        ntChunkSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ntChunkSliderStateChanged(evt);
            }
        });

        ntChunkLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ntChunkLabel.setText("Chunk: 0/0");

        ntChunkTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ntChunkTimeLabel.setText("22/12/2017 13:34:05");

        javax.swing.GroupLayout ntPanelLayout = new javax.swing.GroupLayout(ntPanel);
        ntPanel.setLayout(ntPanelLayout);
        ntPanelLayout.setHorizontalGroup(
            ntPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ntScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1218, Short.MAX_VALUE)
            .addGroup(ntPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ntChunkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ntChunkSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ntChunkTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        ntPanelLayout.setVerticalGroup(
            ntPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ntPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ntPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ntChunkSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ntChunkTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ntChunkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ntScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("nt", ntPanel);

        bacteriaScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        bacteriaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Rank", "Count", "Id", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        bacteriaTable.setMaximumSize(null);
        bacteriaTable.setShowGrid(false);
        bacteriaScrollPane.setViewportView(bacteriaTable);

        bacteriaChunkSlider.setMaximum(0);
        bacteriaChunkSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bacteriaChunkSliderStateChanged(evt);
            }
        });

        bacteriaChunkLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bacteriaChunkLabel.setText("Chunk: 0/0");

        bacteriaChunkTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        bacteriaChunkTimeLabel.setText("22/12/2017 13:34:05");

        javax.swing.GroupLayout bacteriaPanelLayout = new javax.swing.GroupLayout(bacteriaPanel);
        bacteriaPanel.setLayout(bacteriaPanelLayout);
        bacteriaPanelLayout.setHorizontalGroup(
            bacteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bacteriaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1218, Short.MAX_VALUE)
            .addGroup(bacteriaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bacteriaChunkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bacteriaChunkSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bacteriaChunkTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        bacteriaPanelLayout.setVerticalGroup(
            bacteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bacteriaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bacteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bacteriaChunkSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bacteriaChunkTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bacteriaChunkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bacteriaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Bacteria", bacteriaPanel);

        cardScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        cardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Count", "ID", "ARO", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        cardScrollPane.setViewportView(cardTable);
        if (cardTable.getColumnModel().getColumnCount() > 0) {
            cardTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            cardTable.getColumnModel().getColumn(1).setPreferredWidth(10);
            cardTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        cardChunkSlider.setMaximum(0);
        cardChunkSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cardChunkSliderStateChanged(evt);
            }
        });

        cardChunkLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cardChunkLabel.setText("Chunk: 0/0");

        cardChunkTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cardChunkTimeLabel.setText("22/12/2017 13:34:05");

        javax.swing.GroupLayout cardPanelLayout = new javax.swing.GroupLayout(cardPanel);
        cardPanel.setLayout(cardPanelLayout);
        cardPanelLayout.setHorizontalGroup(
            cardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cardScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1218, Short.MAX_VALUE)
            .addGroup(cardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cardChunkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardChunkSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardChunkTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        cardPanelLayout.setVerticalGroup(
            cardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cardChunkTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cardChunkLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cardChunkSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("CARD", cardPanel);

        javax.swing.GroupLayout summaryPanelLayout = new javax.swing.GroupLayout(summaryPanel);
        summaryPanel.setLayout(summaryPanelLayout);
        summaryPanelLayout.setHorizontalGroup(
            summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2000, Short.MAX_VALUE)
        );
        summaryPanelLayout.setVerticalGroup(
            summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2000, Short.MAX_VALUE)
        );

        summaryScrollPane.setViewportView(summaryPanel);

        javax.swing.GroupLayout summaryPanelTabLayout = new javax.swing.GroupLayout(summaryPanelTab);
        summaryPanelTab.setLayout(summaryPanelTabLayout);
        summaryPanelTabLayout.setHorizontalGroup(
            summaryPanelTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(summaryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1218, Short.MAX_VALUE)
        );
        summaryPanelTabLayout.setVerticalGroup(
            summaryPanelTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(summaryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Summary", summaryPanelTab);

        taxonomyPanelTab.setEnabled(false);

        javax.swing.GroupLayout taxonomyPanelLayout = new javax.swing.GroupLayout(taxonomyPanel);
        taxonomyPanel.setLayout(taxonomyPanelLayout);
        taxonomyPanelLayout.setHorizontalGroup(
            taxonomyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2000, Short.MAX_VALUE)
        );
        taxonomyPanelLayout.setVerticalGroup(
            taxonomyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2000, Short.MAX_VALUE)
        );

        taxonomyScrollPane.setViewportView(taxonomyPanel);

        bacteriaChunkSlider1.setMaximum(0);
        bacteriaChunkSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bacteriaChunkSlider1StateChanged(evt);
            }
        });

        bacteriaChunkLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bacteriaChunkLabel1.setText("Chunk: 0/0");

        bacteriaChunkTimeLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        bacteriaChunkTimeLabel1.setText("22/12/2017 13:34:05");

        javax.swing.GroupLayout taxonomyPanelTabLayout = new javax.swing.GroupLayout(taxonomyPanelTab);
        taxonomyPanelTab.setLayout(taxonomyPanelTabLayout);
        taxonomyPanelTabLayout.setHorizontalGroup(
            taxonomyPanelTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(taxonomyScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1218, Short.MAX_VALUE)
            .addGroup(taxonomyPanelTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bacteriaChunkLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bacteriaChunkSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bacteriaChunkTimeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        taxonomyPanelTabLayout.setVerticalGroup(
            taxonomyPanelTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, taxonomyPanelTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(taxonomyPanelTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bacteriaChunkSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bacteriaChunkTimeLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bacteriaChunkLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taxonomyScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Taxonomy", taxonomyPanelTab);

        javax.swing.GroupLayout walkoutPanelLayout = new javax.swing.GroupLayout(walkoutPanel);
        walkoutPanel.setLayout(walkoutPanelLayout);
        walkoutPanelLayout.setHorizontalGroup(
            walkoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2000, Short.MAX_VALUE)
        );
        walkoutPanelLayout.setVerticalGroup(
            walkoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2000, Short.MAX_VALUE)
        );

        walkoutScrollPane.setViewportView(walkoutPanel);

        javax.swing.GroupLayout walkoutPanelTabLayout = new javax.swing.GroupLayout(walkoutPanelTab);
        walkoutPanelTab.setLayout(walkoutPanelTabLayout);
        walkoutPanelTabLayout.setHorizontalGroup(
            walkoutPanelTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1218, Short.MAX_VALUE)
            .addGroup(walkoutPanelTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(walkoutScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1218, Short.MAX_VALUE))
        );
        walkoutPanelTabLayout.setVerticalGroup(
            walkoutPanelTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 787, Short.MAX_VALUE)
            .addGroup(walkoutPanelTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(walkoutScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Walkout", walkoutPanelTab);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jLabel3.setText("Readset: ");
        jToolBar1.add(jLabel3);

        readTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Template", "Complement", "2D" }));
        readTypeCombo.setName(""); // NOI18N
        readTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readTypeComboActionPerformed(evt);
            }
        });
        jToolBar1.add(readTypeCombo);

        passOrFailCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pass", "Fail" }));
        jToolBar1.add(passOrFailCombo);
        jToolBar1.add(jSeparator1);

        jLabel2.setText("Chunks: ");
        jToolBar1.add(jLabel2);

        chunksToLoadCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "1", "10", "100" }));
        chunksToLoadCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chunksToLoadComboActionPerformed(evt);
            }
        });
        jToolBar1.add(chunksToLoadCombo);
        jToolBar1.add(jSeparator4);

        loadNtButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nanookreporter/icon_nt.png"))); // NOI18N
        loadNtButton.setText("nt");
        loadNtButton.setBorder(null);
        loadNtButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadNtButton.setPreferredSize(new java.awt.Dimension(30, 43));
        loadNtButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadNtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadNtButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(loadNtButton);

        loadBacteriaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nanookreporter/icon_bacteria.png"))); // NOI18N
        loadBacteriaButton.setText("bacteria");
        loadBacteriaButton.setBorder(null);
        loadBacteriaButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadBacteriaButton.setMaximumSize(new java.awt.Dimension(100, 47));
        loadBacteriaButton.setMinimumSize(new java.awt.Dimension(64, 47));
        loadBacteriaButton.setPreferredSize(new java.awt.Dimension(50, 43));
        loadBacteriaButton.setSize(new java.awt.Dimension(65, 0));
        loadBacteriaButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadBacteriaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBacteriaButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(loadBacteriaButton);

        loadCardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nanookreporter/icon_card.png"))); // NOI18N
        loadCardButton.setText("CARD");
        loadCardButton.setBorder(null);
        loadCardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadCardButton.setPreferredSize(new java.awt.Dimension(36, 43));
        loadCardButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCardButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(loadCardButton);

        WalkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nanookreporter/icon_walking.png"))); // NOI18N
        WalkButton.setText("Walk");
        WalkButton.setBorder(null);
        WalkButton.setFocusable(false);
        WalkButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        WalkButton.setPreferredSize(new java.awt.Dimension(35, 43));
        WalkButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        WalkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WalkButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(WalkButton);

        progressLabel.setText("Ready");

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        fileMenu.setText("File");

        openMenuItem.setText("Open sample directory");
        openMenuItem.setEnabled(false);
        fileMenu.add(openMenuItem);

        mainMenuBar.add(fileMenu);

        actionMenu.setText("Actions");
        actionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionMenuActionPerformed(evt);
            }
        });

        saveCardSummaryItem.setText("Save CARD summaries");
        saveCardSummaryItem.setEnabled(false);
        saveCardSummaryItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCardSummaryItemActionPerformed(evt);
            }
        });
        actionMenu.add(saveCardSummaryItem);

        saveChunkTimesItem.setText("Save chunk times");
        saveChunkTimesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChunkTimesItemActionPerformed(evt);
            }
        });
        actionMenu.add(saveChunkTimesItem);

        mainMenuBar.add(actionMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainTabbedPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainTabbedPane.getAccessibleContext().setAccessibleName("Stats");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cardChunkSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cardChunkSliderStateChanged
        if (sample != null) {
            BlastChunkSet chunkSet = sample.getCardFile().getChunkSet(type, pf);
            cardChunkLabel.setText("Chunk "+ (cardChunkSlider.getValue() + 1) + "/" + chunkSet.getNumberOfChunks());
            cardChunkTimeLabel.setText(dateFormat.format(chunkSet.getChunkLastModified(cardChunkSlider.getValue())));
            if (cardChunkSlider.getValueIsAdjusting() == false) {
                chunkSet.setSelectedChunk(cardChunkSlider.getValue());
                updateTableCard();
            }
        }
    }//GEN-LAST:event_cardChunkSliderStateChanged

    private void ntChunkSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ntChunkSliderStateChanged
        if (sample != null) {
            BlastChunkSet chunkSet = sample.getNtFile().getChunkSet(type, pf);
            ntChunkLabel.setText("Chunk "+ (ntChunkSlider.getValue() + 1) + "/" + chunkSet.getNumberOfChunks());
            ntChunkTimeLabel.setText(dateFormat.format(chunkSet.getChunkLastModified(ntChunkSlider.getValue())));
            if (ntChunkSlider.getValueIsAdjusting() == false) {
                chunkSet.setSelectedChunk(ntChunkSlider.getValue());
                System.out.println("In ntChunkSliderStateChanged");
                updateTableNt();
            }
        }
    }//GEN-LAST:event_ntChunkSliderStateChanged

    private void bacteriaChunkSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bacteriaChunkSliderStateChanged
        if (sample != null) {
            BlastChunkSet chunkSet = sample.getBacteriaFile().getChunkSet(type, pf);
            bacteriaChunkLabel.setText("Chunk "+ (bacteriaChunkSlider.getValue() + 1) + "/" + chunkSet.getNumberOfChunks());
            bacteriaChunkTimeLabel.setText(dateFormat.format(chunkSet.getChunkLastModified(bacteriaChunkSlider.getValue())));
            if (bacteriaChunkSlider.getValueIsAdjusting() == false) {
                chunkSet.setSelectedChunk(bacteriaChunkSlider.getValue());
                updateTableBacteria();
            }
        }
    }//GEN-LAST:event_bacteriaChunkSliderStateChanged

    private int getSelectedFileType() {
        int fileType = BlastFile.TYPE_TEMPLATE;
        
        if (readTypeCombo.getSelectedItem().equals("2D")) {
            fileType = BlastFile.TYPE_2D;
        }
        
        return fileType;
    }
    
    private int getSelectedPf() {
        int pf = BlastFile.READTYPE_PASS;
        
        if (passOrFailCombo.getSelectedItem().equals("Fail")) {
            pf = BlastFile.READTYPE_FAIL;
        }
        
        return pf;
    }
    
    private void loadNtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadNtButtonActionPerformed
        ChunkLoader loader = new ChunkLoader(this,
                                             sample,
                                             BlastFile.DATABASE_NT,
                                             getSelectedFileType(),
                                             getSelectedPf());
        loader.execute();
    }//GEN-LAST:event_loadNtButtonActionPerformed

    private void loadBacteriaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBacteriaButtonActionPerformed
        ChunkLoader loader = new ChunkLoader(this,
                                             sample,
                                             BlastFile.DATABASE_BACTERIA,
                                             getSelectedFileType(),
                                             getSelectedPf());
        loader.execute();
    }//GEN-LAST:event_loadBacteriaButtonActionPerformed

    private void loadCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCardButtonActionPerformed
        ChunkLoader loader = new ChunkLoader(this,
                                             sample,
                                             BlastFile.DATABASE_CARD,
                                             getSelectedFileType(),
                                             getSelectedPf());
        loader.execute();
    }//GEN-LAST:event_loadCardButtonActionPerformed

    private void saveCardSummaryItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCardSummaryItemActionPerformed
        // TODO add your handling code here:
        System.out.println("Hello");
        sample.writeCardSummaries(type, pf);
    }//GEN-LAST:event_saveCardSummaryItemActionPerformed

    private void actionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_actionMenuActionPerformed

    private void saveChunkTimesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChunkTimesItemActionPerformed
        // TODO add your handling code here:
        sample.writeChunkTimesFile(type, pf);
    }//GEN-LAST:event_saveChunkTimesItemActionPerformed

    private void bacteriaChunkSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bacteriaChunkSlider1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_bacteriaChunkSlider1StateChanged

    private void readTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readTypeComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_readTypeComboActionPerformed

    private void chunksToLoadComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chunksToLoadComboActionPerformed
        String selected = chunksToLoadCombo.getSelectedItem().toString();
        int c;
        
        if (selected.equals("All")) {
            c = 0;
        } else {
            c = Integer.parseInt(selected);
        }
        
        options.setChunksToLoad(c);
    }//GEN-LAST:event_chunksToLoadComboActionPerformed

    private void WalkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalkButtonActionPerformed
        WalkOutAnalyser wao = new WalkOutAnalyser(this, options, sample);
        wao.analyse();
        mainTabbedPane.setSelectedIndex(5);
    }//GEN-LAST:event_WalkButtonActionPerformed
    
    public void findType() {
        pf = getSelectedPf();
        type = getSelectedFileType();
    }
    
    private void setSliders() {
        getType();
        BlastChunkSet amrChunkSet = sample.getCardFile().getChunkSet(type, pf);
        BlastChunkSet taxonChunkSet = sample.getNtFile().getChunkSet(type, pf);
        BlastChunkSet bacteriaChunkSet = sample.getBacteriaFile().getChunkSet(type, pf);
        cardChunkSlider.setValue(amrChunkSet.getLastChunkNumber());
        ntChunkSlider.setValue(taxonChunkSet.getLastChunkNumber());
        bacteriaChunkSlider.setValue(bacteriaChunkSet.getLastChunkNumber());
        amrChunkSet.setSelectedChunk(amrChunkSet.getLastChunkNumber());
        taxonChunkSet.setSelectedChunk(taxonChunkSet.getLastChunkNumber());
        bacteriaChunkSet.setSelectedChunk(bacteriaChunkSet.getLastChunkNumber());
    }
    
    public void updateTableCard() {     
        setStatus("Updating AMR table");
        findType();

        BlastChunkSet amrChunkSet = sample.getCardFile().getChunkSet(type, pf);
        sample.getCardFile().countSet(type, pf);
        sample.getCardFile().updateTable(cardTable, type, pf);
        cardChunkLabel.setText("Chunk "+ (amrChunkSet.getSelectedChunk() + 1) + "/" + amrChunkSet.getNumberOfChunks());
        if (cardChunkSliderMax != amrChunkSet.getLastChunkNumber()) {
            cardChunkSliderMax = amrChunkSet.getLastChunkNumber();
            cardChunkSlider.setMaximum(amrChunkSet.getLastChunkNumber());
            amrChunkSet.setSelectedChunk(cardChunkSliderMax);
        }
        cardChunkSlider.setValue(amrChunkSet.getSelectedChunk());
        cardTable.setModel(amrChunkSet);
        cardTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        setCardColumnWidths();

        setStatus("Table updated");

        mainTabbedPane.setSelectedIndex(2);
    }
    
    public void updateSlidersNt() {
        BlastChunkSet taxonChunkSet = sample.getNtFile().getChunkSet(type, pf);
        if (ntChunkSliderMax != taxonChunkSet.getLastChunkNumber()) {
            ntChunkSliderMax = taxonChunkSet.getLastChunkNumber();
            ntChunkSlider.setMaximum(taxonChunkSet.getLastChunkNumber());
            taxonChunkSet.setSelectedChunk(ntChunkSliderMax);
        }
        ntChunkSlider.setValue(taxonChunkSet.getSelectedChunk());
    }
    
    public void updateTableNt() {     
        System.out.println("Updating nt");
        setStatus("Updating taxonomy table");
        findType();

        BlastChunkSet taxonChunkSet = sample.getNtFile().getChunkSet(type, pf);
        sample.getNtFile().countSet(type, pf);
        sample.getNtFile().updateTable(taxonTable, type, pf);
        ntChunkLabel.setText("Chunk "+ (taxonChunkSet.getSelectedChunk() + 1) + "/" + taxonChunkSet.getNumberOfChunks());
        taxonTable.setModel(taxonChunkSet);
        taxonTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        setNtColumnWidths();

        setStatus("Plotting");
        summaryPanel.processTaxonomy(sample);
        setStatus("Table updated");
        
        mainTabbedPane.setSelectedIndex(0);
    }    

    public void updateTableBacteria() {        
        setStatus("Updating bacteria table");
        findType();

        BlastChunkSet bacteriaChunkSet = sample.getBacteriaFile().getChunkSet(type, pf);
        sample.getBacteriaFile().countSet(type, pf);
        sample.getBacteriaFile().updateTable(bacteriaTable, type, pf);
        bacteriaChunkLabel.setText("Chunk "+ (bacteriaChunkSet.getSelectedChunk() + 1) + "/" + bacteriaChunkSet.getNumberOfChunks());
        if (bacteriaChunkSliderMax != bacteriaChunkSet.getLastChunkNumber()) {
            bacteriaChunkSliderMax = bacteriaChunkSet.getLastChunkNumber();
            bacteriaChunkSlider.setMaximum(bacteriaChunkSet.getLastChunkNumber());
            bacteriaChunkSet.setSelectedChunk(bacteriaChunkSliderMax);
        }
        bacteriaChunkSlider.setValue(bacteriaChunkSet.getSelectedChunk());
        bacteriaTable.setModel(bacteriaChunkSet);
        bacteriaTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        setBacteriaColumnWidths();

        setStatus("Plotting");
        summaryPanel.processTaxonomy(sample);
        setStatus("Table updated");
        
        mainTabbedPane.setSelectedIndex(1);
    }    

    public void setCardColumnWidths() {
        cardTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        cardTable.getColumnModel().getColumn(1).setPreferredWidth(100);        
        cardTable.getColumnModel().getColumn(2).setPreferredWidth(150);
        cardTable.getColumnModel().getColumn(3).setPreferredWidth(300);
        cardTable.getColumnModel().getColumn(4).setPreferredWidth(600);
    }
    
    public void setNtColumnWidths() {
        taxonTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        taxonTable.getColumnModel().getColumn(1).setPreferredWidth(100);        
        taxonTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        taxonTable.getColumnModel().getColumn(3).setPreferredWidth(600);
    }

    public void setBacteriaColumnWidths() {
        bacteriaTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        bacteriaTable.getColumnModel().getColumn(1).setPreferredWidth(100);        
        bacteriaTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        bacteriaTable.getColumnModel().getColumn(3).setPreferredWidth(600);
    }
    
    public void setStatus(String s) {
        progressLabel.setText(s);
    }
    
    private void setSampleDirSelected(String sampleDir) {
        sample = new NanoOKSample(options, sampleDir);
        options.storeLastLoadedSample(sampleDir);
        //ChunkLoader loader = new ChunkLoader(this, sample);
        //loader.execute();
        saveCardSummaryItem.setEnabled(true);
    }
    
    public void setSampleDir(String sampleDir) {
        sample = new NanoOKSample(options, sampleDir);
        options.storeLastLoadedSample(sampleDir);
        saveCardSummaryItem.setEnabled(true);
    }
    
    /**
     * Centres a window on the screen.
     *
     * @param  w the window to centre
     */
    public static void centreWindow(Window w) {
         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
         Rectangle frameSize = w.getBounds();

         w.setLocation((screenSize.width - frameSize.width) / 2,
                       (screenSize.height - frameSize.height) / 2);
    }    
    
    public void handleNewDirectory(String directory) {
    }
    
    public void loadFinished() {
        taxonomyPanel.repaint();
    }
    
    public NanoOKReporterOptions getOptions() {
        return options;
    }
    
    public WalkoutPanel getWalkoutPanel() {
        return walkoutPanel;
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {                
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NanoOKReporter rf = new NanoOKReporter();
                JFileChooser jfc = new JFileChooser();
                jfc.setDialogTitle("Select sample directory");
                jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                
                if (rf.getOptions().getLastSample() != "") {
                    jfc.setSelectedFile(new File(rf.getOptions().getLastSample()));
                }                
                
                int returnVal = jfc.showOpenDialog(rf);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = jfc.getSelectedFile();
                    rf.setSampleDir(selectedFile.toString());
                    centreWindow(rf);
                    rf.setVisible(true);
                    System.out.println("Running");
                    rf.setTitle("NanoOK - " + selectedFile.getName());
                } else {
                    System.exit(0);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup PassFailButtonGroup;
    private javax.swing.ButtonGroup Template2DButtonGroup;
    private javax.swing.JButton WalkButton;
    private javax.swing.JMenu actionMenu;
    private javax.swing.JLabel bacteriaChunkLabel;
    private javax.swing.JLabel bacteriaChunkLabel1;
    private javax.swing.JSlider bacteriaChunkSlider;
    private javax.swing.JSlider bacteriaChunkSlider1;
    private javax.swing.JLabel bacteriaChunkTimeLabel;
    private javax.swing.JLabel bacteriaChunkTimeLabel1;
    private javax.swing.JPanel bacteriaPanel;
    private javax.swing.JScrollPane bacteriaScrollPane;
    private javax.swing.JTable bacteriaTable;
    private javax.swing.JLabel cardChunkLabel;
    private javax.swing.JSlider cardChunkSlider;
    private javax.swing.JLabel cardChunkTimeLabel;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JScrollPane cardScrollPane;
    private javax.swing.JTable cardTable;
    private javax.swing.JComboBox<String> chunksToLoadCombo;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton loadBacteriaButton;
    private javax.swing.JButton loadCardButton;
    private javax.swing.JButton loadNtButton;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JLabel ntChunkLabel;
    private javax.swing.JSlider ntChunkSlider;
    private javax.swing.JLabel ntChunkTimeLabel;
    private javax.swing.JPanel ntPanel;
    private javax.swing.JScrollPane ntScrollPane;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JComboBox<String> passOrFailCombo;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JComboBox<String> readTypeCombo;
    private javax.swing.JMenuItem saveCardSummaryItem;
    private javax.swing.JMenuItem saveChunkTimesItem;
    private javax.swing.JPanel statusPanel;
    private nanookreporter.SummaryPanel summaryPanel;
    private javax.swing.JPanel summaryPanelTab;
    private javax.swing.JScrollPane summaryScrollPane;
    private javax.swing.JTable taxonTable;
    private nanookreporter.TaxonomyPanel taxonomyPanel;
    private javax.swing.JPanel taxonomyPanelTab;
    private javax.swing.JScrollPane taxonomyScrollPane;
    private nanookreporter.WalkoutPanel walkoutPanel;
    private javax.swing.JPanel walkoutPanelTab;
    private javax.swing.JScrollPane walkoutScrollPane;
    // End of variables declaration//GEN-END:variables
}
